// Constant Variables ////////////////
boardData -> object holding arrays of board sizes and bomb count (medium: [30, 50, 15])

// Cell class to dynamically build each cell for the board. Each cell will have values for
// x an y coordinates, game value and booleans for being exposed and flagged. Class will
// also have static attributes for total flagged count and exposed cell count
class Cell -> Static attributes of flaggedCount and exposedCount
              Attributes of x, y, value, exposed, and flagged
              Methods for setting flags and exposing cells


// State Variables ///////////////////
board -> 2D Array of dynamically generated Cell objects that will represent
         the game board
skillLevel -> string which determines board size for game ('easy', 'medium',
              'hard'). Should be initialized to 'medium'
isGameOver -> boolean true if game has ended
time -> integer representing the seconds that have passed in current game
timer -> will set setInterval to this

// Cached Elements ///////////////////
boardEl -> the full board that will use delegated events for clicks
restartEl -> button to reset the game
flagEl -> flag number in menu
timerEl -> the clock that tracks amount of time that has passed since the
           beginning of the current game
skillEl -> select element to choose game's skill level
msgEl -> message displays whether you won or lost

// Setup EventListeners ///////////////
skillEl callback init
restartEl callback init  
boardEl callback handleBoardClick (left click)
boardEl callback handleFlagClick (right click)


Call init()

/////////////// Function init //////////////////////
    skillLevel is set to 'medium' if not defined
    isGameOver is set to false
    time is set to 0
    board is generated to dimensions of skillLevel in boardData
    use a double for loop to build 2d array of cells
        each index gets a new Cell instance with x and y coordinates
    for as many bombs in game
        randomly give cells bomb values if they don't have it already
    loop through 2d array
        if not a bomb, survey surrounding 8 cells for bombs
        cells are populated with "clue" values indicating bomb adjacency
    call render()

////////////// Function render /////////////////////
    if isGameOver is false
        if boardEl has no child
            timerEl get time value
            loop through board arrays
                create div element
                give div an unique id based on x and y coordinates
                append div to board
                msgEl visibility is set to hidden
        apply state values to flag and timer displays in menu
        loop through entire board array
            if cell is exposed
                apply appropriate image based upon value in cell
            else (it is not exposed)
                if (cell is flagged)
                    apply image of flag
                else
                    give cell an unexposed image
    else (game is over)
        loop over all of the cells
            expose entire board with bomb hit turned red (should have value 39)
            show if any flagged spaces were wrong
            call clearInterval
        give msgEl a text message and set visability to visible
    render()
        

////////////// Function handleBoardClick ////////////////////
    if isGameOver is false and board space is not exposed or has a flag
        if timer has not started
            start timer with setInterval
                add 1 to timer (indicating 1 second has passed)
        if target is bomb
            set isGameOver to true
            set cell value to 'hit'
        else if target has value of 0
            call expandExposure(target)
        else
            expose cell
        
        call render()

///////////// Function handleFlagClick //////////////////
    if isGameOver is false and target is not exposed
        call cell flag()
        call render()

///////////// Function expandExposure ////////////////////
    loop through 8 surrounding spaces of target if valid space (eg not outside
    of the perimeter of the game board)
        if space is 1-8 (use classes to locate)
            expose cell
        else space must be empty as well
            make recursive call expandExposure with cell as argument
        


